@layout MainLayout

@using Microsoft.AspNetCore.Routing
@using Microsoft.Extensions.Options

<PageTitle>@Options.Value.DashboardName</PageTitle>

<div class="container-fluid">
    <div class="card">
        <div class="card-header">
            <form id="log-search-form"
                  name="log-search-form"
                  role="form"
                  method="get">
                <div class="row no-gutters">
                    <div class="col">
                        <i class="bi bi-files"></i> Logs
                    </div>
                    <div class="col-sm-2">
                        <select id="log-level-select"
                                name="level"
                                class="form-select form-select-sm"
                                onchange="this.form.submit()"
                                title="Filter by log level">
                            @foreach (var level in Levels)
                            {
                                <option @key="level.Key"
                                        value="@level.Key"
                                        selected="@(Request.Level == level.Key)">
                                    @level.Value
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-3">
                        <div class="input-group input-group-sm mr-2">
                            <div class="input-group-prepend">
                                <a id="previous-date-link"
                                   class="btn btn-sm btn-outline-secondary"
                                   href="@PreviousDateLink()"
                                   title="Previous Date">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </div>
                            <input id="date-input"
                                   type="date"
                                   name="date"
                                   value="@Request.Date?.ToString("yyyy-MM-dd")"
                                   class="form-control form-control-sm"
                                   onblur="this.form.submit()"
                                   placeholder="Date" />
                            <div class="input-group-append">
                                <a id="next-date-button"
                                   class="btn btn-sm btn-outline-secondary"
                                   href="@NextDateLink()"
                                   title="Next Date">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                                <button id="search-date-button"
                                        class="btn btn-sm btn-outline-secondary"
                                        type="submit">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <input type="hidden" name="ContinuationToken" value="@Request.ContinuationToken" />
                <input type="hidden" name="TraceId" value="@Request.TraceId" />
                <input type="hidden" name="SpanId" value="@Request.SpanId" />
                <input type="hidden" name="PageSize" value="@Request.PageSize" />
            </form>
        </div>

        <div class="card-body p-0">
            <LogViewer Logs="@Result.Data" />
        </div>
        <div class="card-footer">
            <nav aria-label="Pagination">
                <ul class="justify-content-md-end m-1 pagination">
                    <li class="page-item">
                        <a class="page-link" href="@FirstPageLink()">
                            First Page
                        </a>
                    </li>
                    @if (HasNextPage())
                    {
                        <li class="page-item">
                            <a class="page-link" href="@NextPageLink()">
                                Next Page
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link">
                                Next Page
                            </span>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public required LogEventRequest Request { get; set; }

    [Parameter, EditorRequired]
    public required LogEventResult Result { get; set; }

    [Inject]
    public LinkGenerator Link { get; set; } = null!;

    [Inject]
    public IOptions<DashboardOptions> Options { get; set; } = null!;

    protected Dictionary<string, string> Levels = new Dictionary<string, string>
    {
        { "", "- Level -" },
        { "Trace", "Trace" },
        { "Debug", "Debug" },
        { "Information", "Information" },
        { "Warning", "Warning" },
        { "Error", "Error" },
        { "Critical", "Critical" },
    };

    protected bool HasNextPage()
    {
        return Result.ContinuationToken.HasValue();
    }

    protected string? FirstPageLink()
    {
        var route = new
        {
            Date = Request.Date?.ToString("yyyy-MM-dd"),
            Level = Request.Level,
            TraceId = Request.TraceId,
            SpanId = Request.SpanId,
            PageSize = Request.PageSize,
        };

        return Link.GetPathByName(DashboardOptions.RounteName, route);
    }

    protected string? NextPageLink()
    {
        var route = new
        {
            ContinuationToken = Result.ContinuationToken,
            Date = Request.Date?.ToString("yyyy-MM-dd"),
            Level = Request.Level,
            TraceId = Request.TraceId,
            SpanId = Request.SpanId,
            PageSize = Request.PageSize,
        };

        return Link.GetPathByName(DashboardOptions.RounteName, route);
    }


    protected string? PreviousDateLink()
    {
        var date = Request.Date ?? DateOnly.FromDateTime(DateTime.Now);
        date = date.AddDays(-1);

        var route = new
        {
            Date = date.ToString("yyyy-MM-dd"),
            Level = Request.Level,
            TraceId = Request.TraceId,
            SpanId = Request.SpanId,
            PageSize = Request.PageSize,
        };

        return Link.GetPathByName(DashboardOptions.RounteName, route);
    }

    protected string? NextDateLink()
    {
        var date = Request.Date ?? DateOnly.FromDateTime(DateTime.Now);
        date = date.AddDays(1);

        var route = new
        {
            Date = date.ToString("yyyy-MM-dd"),
            Level = Request.Level,
            TraceId = Request.TraceId,
            SpanId = Request.SpanId,
            PageSize = Request.PageSize,
        };

        return Link.GetPathByName(DashboardOptions.RounteName, route);
    }
}
